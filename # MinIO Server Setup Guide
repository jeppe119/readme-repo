# MinIO Server Setup - Docker Method Only

## Machine Details
- **IP Address**: 192.168.1.100 (static)
- **Purpose**: Centralized file storage for Warrant development team
- **Method**: Docker Compose (Simple & Fast)

## Step 1: Install Docker

```bash
# Check if Docker is already installed
docker --version
docker-compose --version

# If not installed, install Docker
sudo apt update
sudo apt install -y docker.io docker-compose

# Start and enable Docker service
sudo systemctl enable docker
sudo systemctl start docker

# Test Docker installation
sudo docker run hello-world

# (Optional) Add current user to docker group to avoid sudo
sudo usermod -aG docker $USER
# Note: You'll need to log out and back in for this to take effect
```

## Step 2: Create MinIO Directory and Configuration

```bash
# Create directory for MinIO setup
sudo mkdir -p /opt/minio-docker
cd /opt/minio-docker

# Create docker-compose.yml file
sudo nano docker-compose.yml
```

**Copy this EXACT content into the docker-compose.yml file:**

```yaml
version: '3.8'

services:
  minio:
    image: minio/minio:latest
    container_name: warrant_shared_minio
    restart: unless-stopped
    ports:
      - "9000:9000"    # API port
      - "9001:9001"    # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001" --address ":9000"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  minio_data:
    driver: local
```

**Save and exit:** `Ctrl+X`, then `Y`, then `Enter`

## Step 3: Start MinIO Service

```bash
# Start MinIO in background
sudo docker-compose up -d

# Check if container is running
sudo docker-compose ps

# Check logs to verify startup
sudo docker-compose logs minio

# Check container health
sudo docker ps
```

**Expected output from `docker-compose ps`:**
```
Name                    State    Ports
warrant_shared_minio   Up       0.0.0.0:9000->9000/tcp, 0.0.0.0:9001->9001/tcp
```

## Step 4: Configure Firewall

```bash
# Install UFW if not installed
sudo apt install ufw

# Allow MinIO ports from development network (adjust IP range if needed)
sudo ufw allow from 192.168.1.0/24 to any port 9000
sudo ufw allow from 192.168.1.0/24 to any port 9001

# Enable firewall
sudo ufw --force enable

# Check firewall status
sudo ufw status numbered
```

**Expected output should show:**
```
[ 1] 9000                       ALLOW IN    192.168.1.0/24
[ 2] 9001                       ALLOW IN    192.168.1.0/24
```

## Step 5: Verify Everything Works

### Test Local Access
```bash
# Install curl if not available
sudo apt install curl

# Test MinIO API health endpoint
curl http://localhost:9000/minio/health/live

# Should return: HTTP 200 OK (no output is normal)
```

### Test Network Binding
```bash
# Check what's listening on MinIO ports
sudo netstat -tulpn | grep 9000
sudo netstat -tulpn | grep 9001

# Should show: 0.0.0.0:9000 and 0.0.0.0:9001 (not 127.0.0.1)
```

### Test External Access
```bash
# Test external API access (replace with actual IP)
curl http://192.168.1.100:9000/minio/health/live

# Should return: HTTP 200 OK
```

## Step 6: Access MinIO Web Console

### From the MinIO Server Machine
```bash
# Open web browser and go to:
# http://192.168.1.100:9001
# 
# Login credentials:
# Username: minioadmin
# Password: minioadmin123
```

### Create Initial Bucket
1. **Login to web console** at http://192.168.1.100:9001
2. **Click "Create Bucket"**
3. **Bucket name**: `warrant-storage`
4. **Click "Create Bucket"**
5. **Verify bucket appears in list**

## Step 7: Test from Development Machines

**From each developer machine, test these commands:**

```bash
# Test network connectivity
ping 192.168.1.100

# Test MinIO API access
curl http://192.168.1.100:9000/minio/health/live

# Test web console access (open in browser)
# http://192.168.1.100:9001
```

## Step 8: Management Commands

### Check Status
```bash
# Check if MinIO is running
sudo docker-compose ps

# Check logs
sudo docker-compose logs minio

# Check container resource usage
sudo docker stats warrant_shared_minio
```

### Restart MinIO
```bash
cd /opt/minio-docker
sudo docker-compose restart minio
```

### Stop MinIO
```bash
cd /opt/minio-docker
sudo docker-compose down
```

### Start MinIO
```bash
cd /opt/minio-docker
sudo docker-compose up -d
```

### Update MinIO
```bash
cd /opt/minio-docker
sudo docker-compose pull minio
sudo docker-compose up -d
```

## Step 9: Troubleshooting

### MinIO Container Won't Start
```bash
# Check logs for errors
sudo docker-compose logs minio

# Check disk space
df -h

# Check if ports are already in use
sudo netstat -tulpn | grep 9000
```

### Can't Access from Development Machines
```bash
# Check firewall on MinIO server
sudo ufw status

# Check MinIO is listening on all interfaces
sudo netstat -tulpn | grep 9000
# Should show: 0.0.0.0:9000, not 127.0.0.1:9000

# Test local access first
curl http://localhost:9000/minio/health/live
```

### Forgot Web Console Password
```bash
# Stop MinIO
sudo docker-compose down

# Edit docker-compose.yml and change:
# MINIO_ROOT_PASSWORD: your-new-password

# Start MinIO
sudo docker-compose up -d
```

## Step 10: Success Verification

### âœ… Setup Complete When:
- [ ] `sudo docker-compose ps` shows MinIO as "Up"
- [ ] `curl http://localhost:9000/minio/health/live` returns HTTP 200
- [ ] `curl http://192.168.1.100:9000/minio/health/live` returns HTTP 200 (from dev machine)
- [ ] Web console accessible at http://192.168.1.100:9001
- [ ] `warrant-storage` bucket exists in web console
- [ ] Firewall allows ports 9000/9001 from development network

### Final Test from Development Machine
Once setup is complete, test from your development machine:

```bash
# Start your Django services
docker-compose up -d

# Test Django connection to MinIO
docker-compose exec backend python manage.py shell
```

In Django shell:
```python
from apps.media.services.storage_service import StorageService
storage = StorageService()
health = storage.health_check()
print("Connection to MinIO server:", health)
# Should show: {'status': 'healthy', 'minio_connection': 'ok'}
```

---

## Quick Reference Card

**Server**: 192.168.1.100  
**API**: http://192.168.1.100:9000  
**Console**: http://192.168.1.100:9001  
**Login**: minioadmin / minioadmin123  
**Bucket**: warrant-storage  
**Config Location**: /opt/minio-docker/  
**Restart Command**: `cd /opt/minio-docker && sudo docker-compose restart minio`  
**Logs Command**: `sudo docker-compose logs minio`  

---
